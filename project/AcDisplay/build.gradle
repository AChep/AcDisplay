/*
 * Copyright (C) 2014 AChep@xda <artemchep@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 */


import groovy.swing.SwingBuilder

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}

apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 'android-L'
    buildToolsVersion '20.0'

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    dexOptions {
        incremental false
    }

    defaultConfig {
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
        }
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("ACDISPLAY_SIGN_STORE_FILE") + "")
            keyAlias System.getenv("ACDISPLAY_SIGN_KEY_ALIAS") + ""
            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword 'empty'
            keyPassword 'empty'
        }
    }

    SimpleDateFormat timeStampFormat = new SimpleDateFormat(
            "EEE MMMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
    String timeStamp = timeStampFormat.format(Calendar.getInstance().getTime());
    String playPublicKey = System.getenv("ACDISPLAY_GOOGLE_PLAY_PUBLIC_KEY");

    // Google Play key is very important and better to check it twice
    // then to get a billion of Force Close reports.
    println "- - - - - - - - - - - -"
    println "\u001B[36m\u001B[1mGOOGLE_PLAY_PUBLIC_KEY\u001B[0m: " + playPublicKey
    println "- - - - - - - - - - - -"

    buildTypes {
        debug {
            versionNameSuffix '-debug'
            buildConfigField "boolean", "MY_DEBUG", "true"
            buildConfigField "String", "MY_TIME_STAMP", "\"" + timeStamp + "\""
            // In-App-Billings service compares the signs of apks, so
            // the service won't accept debug build.
            buildConfigField "String", "MY_GOOGLE_PLAY_PUBLIC_KEY", "null"
        }
        release {
            zipAlign true
            runProguard true
            proguardFile 'proguard-rules.txt'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "MY_DEBUG", "false"
            buildConfigField "String", "MY_TIME_STAMP", "\"" + timeStamp + "\""
            buildConfigField "String", "MY_GOOGLE_PLAY_PUBLIC_KEY", "\"" + playPublicKey + "\""
        }
    }
    productFlavors {
        defaultFlavor {}
        releaseFlavor {}
    }
}

dependencies {
    provided files('src/main/libs/XposedBridgeApi-42.jar')
    compile 'com.android.support:support-v4:19.+'
}

project.task('askForPasswords') << {
    def passKeystore = ''
    def passKey = ''
    if (System.console() == null) {
        new SwingBuilder().dialog(
                modal: true,
                title: 'Enter sign config:',
                alwaysOnTop: true,
                resizable: false,
                locationRelativeTo: null,
                pack: true,
                show: true
        ) {
            panel(constraints: BorderLayout.CENTER) {
                tableLayout(cellpadding: 4) {
                    tr {
                        td { label(text: "Keystore password:") }
                        td { passwordField(columns: 20, id: 'inputKeystore') }
                    }
                    tr {
                        td { label(text: "Key password:") }
                        td { passwordField(columns: 20, id: 'inputKey') }
                    }
                }
            }
            panel(constraints: BorderLayout.SOUTH) {
                button(defaultButton: true, text: "OK", actionPerformed: {
                    passKeystore = inputKeystore.password;
                    passKey = inputKey.password;
                    dispose(); // Close dialog
                })
            }
        } // dialog end
    } else {
        Console console = System.console();
        console.printf("\n\n\u001B[36m\u001B[1mSigning config\u001B[0m\n")
        passKeystore = new String(console.readPassword("Please enter store password: "))
        passKey = new String(console.readPassword("Please enter key password: "))
    }

    if (passKeystore.size() <= 0 || passKey.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }

    android.signingConfigs.release.storePassword = passKeystore
    android.signingConfigs.release.keyPassword = passKey
}

project.configure(project) {
    if (it.hasProperty("android")) {
        tasks.whenTaskAdded { theTask ->
            if ((theTask.name ==~ /package.*Release/)
                    && it.android.hasProperty("signingConfigs")
                    && it.android.signingConfigs.hasProperty("release")) {
                it.android.signingConfigs.release.storePassword = "-"
                it.android.signingConfigs.release.keyPassword = "-"
                theTask.dependsOn "askForPasswords"
            }
        }
    }
}
